t$hour <- as.integer(THMS/10000)
t$min <- as.integer((THMS%%10000)/100)
t$sec <- as.integer(THMS%%100)
tc <- as.POSIXct(t, tz='UTC', origin=0)
if (t$hour < hour1) {tc <- tc + 86400}
index <- idx[Time==tc]
return (index)
}
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
GetIndex <- function (Time, THMS) {
# This function returns the index in Time corresponding to THMS,
# where Time should be POSIXct-format and THMS an integer HHMMSS.
idx = 1:length(Time)
t <- as.POSIXlt(Time[1], tz='UTC', origin=0)
hour1 <- t$hour
t$hour <- as.integer(THMS/10000)
t$min <- as.integer((THMS%%10000)/100)
t$sec <- as.integer(THMS%%100)
tc <- as.POSIXct(t, tz='UTC')
if (t$hour < hour1) {tc <- tc + 86400}
index <- idx[Time==tc]
return (index)
}
detach(Data)
detach(Data)
detach(Data)
detach(Data)
detach(Data)
detach(Data)
rm(Time)
GetIndex <- function (Time, THMS) {
# This function returns the index in Time corresponding to THMS,
# where Time should be POSIXct-format and THMS an integer HHMMSS.
idx = 1:length(Time)
t <- as.POSIXlt(Time[1], tz='UTC', origin=0)
hour1 <- t$hour
t$hour <- as.integer(THMS/10000)
t$min <- as.integer((THMS%%10000)/100)
t$sec <- as.integer(THMS%%100)
tc <- as.POSIXct(t, tz='UTC')
if (t$hour < hour1) {tc <- tc + 86400}
index <- idx[Time==tc]
return (index)
}
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
GetIndex <- function (Time, THMS) {
# This function returns the index in Time corresponding to THMS,
# where Time should be POSIXct-format and THMS an integer HHMMSS.
idx = 1:length(Time)
t <- as.POSIXlt(Time[1], tz='UTC', origin="1970-01-01")
hour1 <- t$hour
t$hour <- as.integer(THMS/10000)
t$min <- as.integer((THMS%%10000)/100)
t$sec <- as.integer(THMS%%100)
tc <- as.POSIXct(t, tz='UTC')
if (t$hour < hour1) {tc <- tc + 86400}
index <- idx[Time==tc]
return (index)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1,r2)
r <- r1:r2
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
GetIndex (Time, 201500)
GetStartEnd(Time)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
if ((SE[1] < Start)|(SE[2] > End) {
print (c("Requested time is not in file (file range is ", SE[1], " to ",SE[2]))
return (1)
}
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
return (r)
}
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
if ((SE[1] < Start)|(SE[2] > End) {
print (c("Requested time is not in file (file range is ", SE[1], " to ",SE[2]))
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
}
return (r)
}
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
if ((SE[1] < Start)|(SE[2] > End)) {
print (c("Requested time is not in file (file range is ", SE[1], " to ", SE[2], ")"))
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
}
return (r)
}
detach(Data)
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SE <- GetStartEnd(Time)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE[1], Start))
if ((SE[1] < Start)|(SE[2] > End)) {
print (c("Requested time is not in file (file range is ", SE[1], " to ", SE[2], ")"))
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
}
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE[1], Start))
if ((SE[1] > Start)|(SE[2] < End)) {
print (c("Requested time is not in file (file range is ", SE[1], " to ", SE[2], ")"))
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
}
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE[1], Start))
if ((SE[1] > Start)|(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
print (r1)
print (r2)
r <- r1:r2
}
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 201500, 203000)
plotWAC(Time,PALT)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
if ((SE[1] > Start)|(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
}
return (r)
}
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 1500, 13000)
plotWAC(Time,PALT)
F <- 5
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 1500, 13000)
plotWAC(Time,PALT)
detach(Data)
detach(Data)
detach(Data)
attach(Data)
r <- SetRange (Time, 1500, 13000)
plotWAC(Time[r],PALT[r])
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE, Start, End))
if ((SE[1] > Start)|(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
}
return (r)
}
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 1500, 13000)
plotWAC(Time[r],PALT[r])
?GetNetCDF
?GetNetCDF()
?GetStartEnd
GetIndex <- function (Time, THMS) {
# This function returns the index in Time corresponding to THMS,
# where Time should be POSIXct-format and THMS an integer HHMMSS.
idx = 1:length(Time)
t <- as.POSIXlt(Time[1], tz='UTC', origin="1970-01-01")
hour1 <- t$hour
print (hour1)
t$hour <- as.integer(THMS/10000)
print (t$hour)
t$min <- as.integer((THMS%%10000)/100)
t$sec <- as.integer(THMS%%100)
tc <- as.POSIXct(t, tz='UTC')
if (t$hour < hour1) {tc <- tc + 86400}
index <- idx[Time==tc]
return (index)
}
detach(Data)
detach(Data)
detach(Data)
F <- 6
fname = paste ("/home/Data/CONTRAST/CONTRASTrf",
formatC(F,digits=0,width=2, format='d',
flag='0'), '.nc', sep='')
VarList <- c("TASX", "PSXC", "PALT")
Data <- GetNetCDF (fname, VarList)
attach(Data)
r <- SetRange (Time, 1500, 13000)
plotWAC(Time[r],PALT[r])
detach(Data)
detach(Data)
source('~/.active-rstudio-document', echo=TRUE)
build ("~/RStudio/RANADU")
detach("package:RANADU", unload=TRUE)
install.packages("~/RStudio/RANADU_0.0-2014-05-24.tar.gz", repos = NULL, type = "source")
library("RANADU", lib.loc="/home/cooperw/R/x86_64-redhat-linux-gnu-library/3.0")
source('~/.active-rstudio-document', echo=TRUE)
GetStartEnd(Time)
GetIndex(Time, 235500)
i <- GetIndex(Time, 235500)
i
i <- GetIndex(Time, 1500)
i
i <- GetIndex(Time, 1510)
i
ls()
ls()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
detach("package:RANADU", unload=TRUE)
library("RANADU", lib.loc="/home/cooperw/R/x86_64-redhat-linux-gnu-library/3.0")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
detach(Data)
detach(Data)
detach(Data)
detach(Data)
ls()
Start
GetStartEnd(Time)
attach(Data)
GetStartEnd(Time)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE, Start, End))
if ((SE[1] > Start)|(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
}
return (r)
}
r <- SetRange (Time, 1500, 13000)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE, Start, End))
if ((SE[1] > Start)||(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
}
return (r)
}
r <- SetRange (Time, 1500, 13000)
SetRange <- function (Time, Start=0, End=0) {
SE <- GetStartEnd(Time)
print (c(SE, Start, End))
if (SE[1] > SE[2]) {
ChangeDate <- TRUE
}
if ((!ChangeDate &&(SE[1] > Start))||(SE[2] < End)) {
print ("Requested time range is not in this file")
r <- 1
} else {
r1 <- ifelse ((Start == 0), 1, GetIndex (Time, Start))
r2 <- ifelse ((End == 0), length (Time), GetIndex (Time, End))
r <- r1:r2
}
return (r)
}
r <- SetRange (Time, 1500, 13000)
r
plotWAC(Time[r],PALT[r])
detach(Data)
detach(Data)
source('~/.active-rstudio-document', echo=TRUE)
Document("~/RStudio/RANADU")
library("rstudio", lib.loc="/home/cooperw/R/x86_64-redhat-linux-gnu-library/3.0")
document("~/RStudio/RANADU")
build("~/RStudio/RANADU")
install("~/RStudio/RANADU")
source('~/.active-rstudio-document', echo=TRUE)
?GetStartEnd
ls()
require(roxygen2)
document ("~/RStudio/RANADU")
build ("~/RStudio/RANADU")
require(devtools)
document ("~/RStudio/RANADU")
build ("~/RStudio/RANADU")
install ("~/RStudio/RANADU")
?getNetCDF
document ("RANADU")
detach("package:devtools", unload=TRUE)
document ("RANADU")
library("devtools", lib.loc="/home/cooperw/R/x86_64-redhat-linux-gnu-library/3.0")
has_devel()
wd(~/RStudio/RANADU)
wd("~/RStudio/RANADU")
document()
check()
document()
check()
document()
check()
check()
document()
check()
document()
check()
clean()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
document()
check()
check()
build()
install()
?GetNetCDF
ls()
source('~/RStudio/Test.R', echo=TRUE)
MachNumber (200.,80.)
library("Ranadu", lib.loc="/home/cooperw/R/x86_64-redhat-linux-gnu-library/3.0")
MachNumber (200.,80.)
TrueAirspeed (MachNumber (200.,90.), -60.)
TrueAirspeed (MachNumber (200.,90.3), -60.)
source('~/RStudio/Ranadu/ButterworthFilter.R', echo=TRUE)
install.packages(c("ncdf", "devtools", "roxygen2", "nleqslv"))
require(devtools)
require(roxygen2)
wd("~/RStudio/Ranadu")
document()
check()
build()
install()
TellAbout(Data$GGALT)
